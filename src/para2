

double f(double input){

	double output=0;
/*printf("%lf\n",input );*/
	if(input<0.8){
		output=0.5;		
	}
	else{
		output=2.5-2.5*input;

	}

	return output;
}

Shape * InitializeGauss(Shape * str){
	int i,j;
	double a=1.0/N;
		double b=1.0/N;
	

	str->pointNo=N*P;
	str->normNo=N*P;
	str->vrtx=malloc(4*N*sizeof(G3Xpoint));
	str->norm=malloc(N*sizeof(G3Xvector));
	memset(str->vrtx, 0,N*sizeof(G3Xpoint));
	memset(str->norm, 0,N*sizeof(G3Xvector));

	G3Xpoint *vt=str->vrtx;
	G3Xpoint *vn=str->norm;


	for(i=0;i<N;i++)
	{

		for (j=0;j<P;j++)
		{
			(*vt)[0]=i*a;
			(*vt)[1]=j*a;
			(*vt)[2]=exp(-i*a)*exp(-j*b);
			vt++;

		}

	}

	return str;
}


void DrawGauss(Shape * str){

	int i,j,k,N2,P2,l;
	i=0;
	j=0;
	k=0;
/*
if(animate==true){
InitializeGaussTransformation(str,R);	
}
*/

int stepn=N/n; int stepp=P/p;

/*SQUELETTE PAVE*/
glBegin(GL_POINTS);
g3x_Material(bleu,ambi,diff,spec,shin,1.);

for(i=0;i<str->pointNo;i++){

	glVertex3dv(str->vrtx[i]);

}

glEnd();

/*TEXTURE PAVE*/
glEnable(GL_LIGHTING);
glBegin(GL_QUADS);


g3x_Material(rouge,ambi,diff,spec,shin,1.);


i=4;
glVertex3dv(str->vrtx[i]);
glVertex3dv(str->vrtx[i+1]);
glVertex3dv(str->vrtx[i+2]);
glVertex3dv(str->vrtx[i+3]);

for(i=0;i<str->pointNo-7;i++){

/*faces de cotÃ© ouvert*/
	glVertex3dv(str->vrtx[i]);
	glVertex3dv(str->vrtx[i+3]);
	glVertex3dv(str->vrtx[i+7]);
	glVertex3dv(str->vrtx[i+4]);


	glNormal3dv(str->norm[i]);

}

glVertex3dv(str->vrtx[i]);
glVertex3dv(str->vrtx[i+1]);
glVertex3dv(str->vrtx[i+2]);
glVertex3dv(str->vrtx[i+3]);


/*g3x_Material(rouge,ambi,diff,spec,shin,1.);*/



glEnd(); 
glDisable(GL_LIGHTING);

}
